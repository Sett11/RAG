from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from typing import Dict
import re
import dotenv
import asyncio
import nest_asyncio
import os
from utils.mylogger import Logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
logger = Logger('aggregator', 'aggregator.log')
logger.info("–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.load_dotenv()
logger.debug("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ nest_asyncio –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()
logger.debug("nest_asyncio –ø—Ä–∏–º–µ–Ω–µ–Ω")

class ChannelAggregatorBot:
    """
    –ö–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤ –∏ —á–∞—Ç–æ–≤.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.
    """
    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º.
        
        Args:
            token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤")
        if not token:
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            
        self.token = token
        self.bot = Bot(token=token)
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è aiogram 3.x
        self.dp = Dispatcher()
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
        # –§–æ—Ä–º–∞—Ç: {channel_id: {name, link, last_message_id}}
        self.subscribed_channels: Dict[str, Dict] = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        logger.debug("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
        self.register_handlers()
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.dp.message.register(self.start, Command(commands=["start"]))
        self.dp.message.register(self.help, Command(commands=["help"]))
        self.dp.message.register(self.list_channels, Command(commands=["list"]))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self.handle_message, F.text & ~F.command)
        self.dp.message.register(self.handle_channel_update, F.chat.type.in_({"channel", "group", "supergroup"}))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.dp.message.register(self.debug_handler, F.all)
    
    async def debug_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text if message.text else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}, "
                    f"—Ç–∏–ø: {message.content_type}, –æ—Ç: {message.from_user.id if message.from_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    
    async def start(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
            "ü§ñ –Ø –±–æ—Ç –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤ –∏ —á–∞—Ç–æ–≤\n"
            "üì• –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã, –∏ —è –±—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–µ—Å—å\n"
            "üìö –¢–µ–±–µ –Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è –¥–µ—Ä–∂–∞—Ç—å —É —Å–µ–±—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –∫—É—á—É –∫–∞–Ω–∞–ª–æ–≤ \n"
            "üì∞ –ù–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—à—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π üòä\n"
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )
    
    async def help(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
        
        Args:
            message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
        help_text = (
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚ñ∂Ô∏è /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "‚ùì /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "üìë /list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "\n"
            "üîó –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, —á–∞—Ç –∏–ª–∏ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö."
        )
        await message.answer(help_text)
    
    async def list_channels(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.
        
        Args:
            message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
        if not self.subscribed_channels:
            logger.debug("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
            await message.answer("üì≠ –í—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.")
            return
        
        channels_list = "\n".join(
            f"{i+1}. {info['name']} ({info['link']})"
            for i, (_, info) in enumerate(self.subscribed_channels.items())
        )
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–∑ {len(self.subscribed_channels)} –∫–∞–Ω–∞–ª–æ–≤")
        await message.answer(f"üìã –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n{channels_list}")
    
    async def handle_message(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã).
        –ü–∞—Ä—Å–∏—Ç —Å—Å—ã–ª–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.
        
        Args:
            message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
        text = message.text.strip()
        channel_info = await self.parse_telegram_link(text)
        
        if not channel_info:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏: {text}")
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª, –≥—Ä—É–ø–ø—É –∏–ª–∏ —á–∞—Ç.")
            return
        
        self.subscribed_channels[channel_info['id']] = channel_info
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª: {channel_info['name']} (ID: {channel_info['id']})")
        await message.answer(
            f"‚úÖ –ö–∞–Ω–∞–ª {channel_info['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö!\n"
            f"üì¢ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–µ—Å—å."
        )
    
    async def parse_telegram_link(self, link: str) -> Dict | None:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª/—á–∞—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.
        
        Args:
            link (str): –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª/—á–∞—Ç
            
        Returns:
            Dict | None: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ None, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è
        """
        logger.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏: {link}")
        patterns = [
            r'(?:https?://)?t\.me/([a-zA-Z0-9_]{5,32})/?$',
            r'(?:https?://)?telegram\.me/([a-zA-Z0-9_]{5,32})/?$',
            r'(?:https?://)?telegram\.org/([a-zA-Z0-9_]{5,32})/?$'
        ]
        
        username = None
        for pattern in patterns:
            match = re.match(pattern, link)
            if match:
                username = match.group(1)
                break
        
        if not username:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Å—ã–ª–∫–∏: {link}")
            return None
        
        try:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ @{username}")
            chat = await self.bot.get_chat(f"@{username}")
            return {
                'id': str(chat.id),
                'name': chat.title or chat.username,
                'link': f"https://t.me/{username}",
                'type': chat.type
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            return None
    
    async def handle_channel_update(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö.
        –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.
        
        Args:
            message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
        """
        if str(message.chat.id) not in self.subscribed_channels:
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {message.chat.id}")
            return
        
        channel_info = self.subscribed_channels[str(message.chat.id)]
        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_info['name']} (ID: {message.chat.id})")
        
        text = (
            f"üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_info['name']}:\n\n"
            f"{message.text or message.caption or ''}"
        )
        
        try:
            if message.photo:
                logger.debug(f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_info['name']}")
                await self.bot.send_photo(
                    chat_id=message.chat.id,
                    photo=message.photo[-1].file_id,
                    caption=text
                )
            elif message.video:
                logger.debug(f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–∏–¥–µ–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_info['name']}")
                await self.bot.send_video(
                    chat_id=message.chat.id,
                    video=message.video.file_id,
                    caption=text
                )
            elif message.document:
                logger.debug(f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_info['name']}")
                await self.bot.send_document(
                    chat_id=message.chat.id,
                    document=message.document.file_id,
                    caption=text
                )
            else:
                logger.debug(f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_info['name']}")
                await self.bot.send_message(
                    chat_id=message.chat.id,
                    text=text
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_info['name']}: {e}")
    
    async def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤")
        try:
            logger.debug("–ù–∞—á–∞–ª–æ –ø–æ–ª–ª–∏–Ω–≥–∞ –±–æ—Ç–∞")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è aiogram 3.x
            await self.dp.start_polling(self.bot, allowed_updates=["message", "callback_query"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    token = os.getenv('BOT_TOKEN')
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞")
    bot = ChannelAggregatorBot(token=token)
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        asyncio.run(bot.run())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise