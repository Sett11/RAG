# –∏–º–ø–æ—Ä—Ç—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
import re
import os
from typing import Dict, List, Optional
import asyncio
from enum import Enum, auto

# –∏–º–ø–æ—Ä—Ç—ã —É—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, ContentType
from aiogram.enums import ChatType
import dotenv
import nest_asyncio
import redis.asyncio as redis
from pydantic import BaseModel

# –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from utils.mylogger import Logger


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
logger = Logger('aggregator', 'aggregator.log')
logger.info("–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.load_dotenv()
logger.debug("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ nest_asyncio –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()
logger.debug("nest_asyncio –ø—Ä–∏–º–µ–Ω–µ–Ω")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379')
    MAX_SUBSCRIPTIONS_PER_USER = int(os.getenv('MAX_SUBSCRIPTIONS_PER_USER', 50))
    SUPPORTED_CONTENT_TYPES = {
        ContentType.TEXT,
        ContentType.PHOTO,
        ContentType.VIDEO,
        ContentType.DOCUMENT,
        ContentType.AUDIO,
        ContentType.VOICE
    }

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class ChannelInfo(BaseModel):
    id: str
    name: str
    link: str
    type: ChatType

class ContentTypeFilter(Enum):
    ALL = auto()
    TEXT = auto()
    MEDIA = auto()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
async def init_redis() -> redis.Redis:
    return redis.from_url(Config.REDIS_URL)

class ChannelAggregatorBot:
    """
    –ö–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤ –∏ —á–∞—Ç–æ–≤.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.
    """
    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º.
        
        Args:
            token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤")
        if not token:
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            
        self.token = token
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.redis = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        logger.debug("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
        self.register_handlers()
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def init(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (Redis)"""
        self.redis = await init_redis()
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.start, Command(commands=["start"]))
        self.dp.message.register(self.help, Command(commands=["help"]))
        self.dp.message.register(self.list_channels, Command(commands=["list"]))
        self.dp.message.register(self.unsubscribe, Command(commands=["unsubscribe"]))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self.handle_message, F.text & ~F.command)
        self.dp.message.register(
            self.handle_channel_update, 
            F.chat.type.in_({ChatType.CHANNEL, ChatType.GROUP, ChatType.SUPERGROUP})
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.dp.message.register(self.debug_handler)
    
    async def debug_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text if message.text else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}, "
                    f"—Ç–∏–ø: {message.content_type}, –æ—Ç: {message.from_user.id if message.from_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    
    async def start(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
            "ü§ñ –Ø –±–æ—Ç –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤ –∏ —á–∞—Ç–æ–≤\n"
            "üì• –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã, –∏ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
            "üìö –¢–µ–±–µ –Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è –¥–µ—Ä–∂–∞—Ç—å —É —Å–µ–±—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –∫—É—á—É –∫–∞–Ω–∞–ª–æ–≤\n"
            "üì∞ –ù–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—à—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π üòä\n"
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )
    
    async def help(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
        """
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
        help_text = (
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚ñ∂Ô∏è /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "‚ùì /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "üìë /list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚ùå /unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞\n"
            "\n"
            "üîó –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, —á–∞—Ç –∏–ª–∏ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö."
        )
        await message.answer(help_text)
    
    async def list_channels(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.
        """
        user_id = str(message.from_user.id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
        
        subscribed_channels = await self.get_user_subscriptions(user_id)
        if not subscribed_channels:
            logger.debug("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
            await message.answer("üì≠ –í—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.")
            return
        
        channels_info = []
        for channel_id in subscribed_channels:
            channel = await self.get_channel_info(channel_id)
            if channel:
                channels_info.append(f"‚Ä¢ {channel.name} ({channel.link})")
        
        if not channels_info:
            await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return
        
        channels_list = "\n".join(channels_info)
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–∑ {len(channels_info)} –∫–∞–Ω–∞–ª–æ–≤")
        await message.answer(f"üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n{channels_list}")
    
    async def unsubscribe(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribe.
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞.
        """
        user_id = str(message.from_user.id)
        args = message.text.split()[1:]
        
        if not args:
            await message.answer("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –µ–≥–æ ID –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /unsubscribe")
            return
        
        channel_identifier = args[0]
        channel_info = await self.parse_telegram_link(channel_identifier) or await self.get_channel_info(channel_identifier)
        
        if not channel_info:
            await message.answer("‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞.")
            return
        
        if not await self.is_user_subscribed(user_id, channel_info.id):
            await message.answer(f"‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {channel_info.name}.")
            return
        
        await self.remove_user_subscription(user_id, channel_info.id)
        await message.answer(f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ {channel_info.name}.")
    
    async def handle_message(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã).
        –ü–∞—Ä—Å–∏—Ç —Å—Å—ã–ª–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.
        """
        user_id = str(message.from_user.id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
        
        text = message.text.strip()
        channel_info = await self.parse_telegram_link(text)
        
        if not channel_info:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏: {text}")
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª, –≥—Ä—É–ø–ø—É –∏–ª–∏ —á–∞—Ç.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        user_subs = await self.get_user_subscriptions(user_id)
        if len(user_subs) >= Config.MAX_SUBSCRIPTIONS_PER_USER:
            await message.answer(f"‚ö†Ô∏è –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ({Config.MAX_SUBSCRIPTIONS_PER_USER}).")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–æ—Ç–∞ –∫ –∫–∞–Ω–∞–ª—É
        # try:
        #     chat_member = await self.bot.get_chat_member(chat_id=channel_info.id, user_id=self.bot.id)
        #     if chat_member.status not in ['administrator', 'member', 'creator']:
        #         await message.answer("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        #         return
        # except Exception as e:
        #     logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
        #     await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")
        #     return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await self.save_channel_info(channel_info)
        await self.add_user_subscription(user_id, channel_info.id)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª: {channel_info.name} (ID: {channel_info.id})")
        await message.answer(
            f"‚úÖ –ö–∞–Ω–∞–ª {channel_info.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏!\n"
            f"üì¢ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        )
    
    async def handle_channel_update(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö.
        –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        """
        channel_id = str(message.chat.id)
        if not await self.is_channel_tracked(channel_id):
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {channel_id}")
            return
        
        channel_info = await self.get_channel_info(channel_id)
        if not channel_info:
            return
        
        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_info.name} (ID: {channel_id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        subscribers = await self.get_channel_subscribers(channel_id)
        if not subscribers:
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_info.name}:\n\n"
            f"{message.text or message.caption or ''}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        for user_id in subscribers:
            try:
                if message.content_type == ContentType.TEXT:
                    await self.bot.send_message(chat_id=user_id, text=text)
                elif message.content_type == ContentType.PHOTO:
                    await self.bot.send_photo(
                        chat_id=user_id,
                        photo=message.photo[-1].file_id,
                        caption=text
                    )
                elif message.content_type == ContentType.VIDEO:
                    await self.bot.send_video(
                        chat_id=user_id,
                        video=message.video.file_id,
                        caption=text
                    )
                elif message.content_type == ContentType.DOCUMENT:
                    await self.bot.send_document(
                        chat_id=user_id,
                        document=message.document.file_id,
                        caption=text
                    )
                elif message.content_type in (ContentType.AUDIO, ContentType.VOICE):
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=f"üîî –ù–æ–≤–æ–µ –∞—É–¥–∏–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_info.name} (–±–æ—Ç –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫—É –∞—É–¥–∏–æ)"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫
                await self.remove_user_subscription(user_id, channel_id)
    
    # Redis –º–µ—Ç–æ–¥—ã
    async def save_channel_info(self, channel_info: ChannelInfo) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –≤ Redis"""
        await self.redis.hset(
            f"channel:{channel_info.id}",
            mapping={
                "name": channel_info.name,
                "link": channel_info.link,
                "type": channel_info.type.value
            }
        )
    
    async def get_channel_info(self, channel_id: str) -> Optional[ChannelInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏–∑ Redis"""
        data = await self.redis.hgetall(f"channel:{channel_id}")
        if not data:
            return None
        
        return ChannelInfo(
            id=channel_id,
            name=data.get(b'name', b'').decode(),
            link=data.get(b'link', b'').decode(),
            type=ChatType(data.get(b'type', b'').decode())
        )
    
    async def is_channel_tracked(self, channel_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –∫–µ–º-–ª–∏–±–æ"""
        subscribers = await self.get_channel_subscribers(channel_id)
        return len(subscribers) > 0
    
    async def add_user_subscription(self, user_id: str, channel_id: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
        await self.redis.sadd(f"user:{user_id}:subscriptions", channel_id)
        await self.redis.sadd(f"channel:{channel_id}:subscribers", user_id)
    
    async def remove_user_subscription(self, user_id: str, channel_id: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
        await self.redis.srem(f"user:{user_id}:subscriptions", channel_id)
        await self.redis.srem(f"channel:{channel_id}:subscribers", user_id)
    
    async def get_user_subscriptions(self, user_id: int) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        members = await self.redis.smembers(f"user:{user_id}:subscriptions")
        return [channel_id.decode() for channel_id in members]
    
    async def get_channel_subscribers(self, channel_id: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞"""
        return [user_id.decode() async for user_id in await self.redis.smembers(f"channel:{channel_id}:subscribers")]
    
    async def is_user_subscribed(self, user_id: str, channel_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
        return await self.redis.sismember(f"user:{user_id}:subscriptions", channel_id)
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def parse_telegram_link(self, link: str) -> Optional[ChannelInfo]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª/—á–∞—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ChannelInfo –∏–ª–∏ None, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è.
        """
        logger.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏: {link}")
        patterns = [
            r'(?:https?://)?t\.me/([a-zA-Z0-9_]{5,32})/?$',
            r'(?:https?://)?telegram\.me/([a-zA-Z0-9_]{5,32})/?$',
            r'(?:https?://)?telegram\.org/([a-zA-Z0-9_]{5,32})/?$'
        ]
        
        username = None
        for pattern in patterns:
            match = re.match(pattern, link)
            if match:
                username = match.group(1)
                break
        
        if not username:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Å—ã–ª–∫–∏: {link}")
            return None
        
        try:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ @{username}")
            chat = await self.bot.get_chat(f"@{username}")
            return ChannelInfo(
                id=str(chat.id),
                name=chat.title or chat.username,
                link=f"https://t.me/{username}",
                type=chat.type
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            return None
    
    async def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤")
        try:
            await self.init()
            logger.debug("–ù–∞—á–∞–ª–æ –ø–æ–ª–ª–∏–Ω–≥–∞ –±–æ—Ç–∞")
            await self.dp.start_polling(
                self.bot, 
                allowed_updates=["message", "callback_query"],
                skip_updates=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
        finally:
            if self.redis:
                await self.redis.close()

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    token = os.getenv('BOT_TOKEN')
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞")
    bot = ChannelAggregatorBot(token=token)
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        asyncio.run(bot.run())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise