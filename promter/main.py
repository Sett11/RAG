import os
from typing import Optional, Dict
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.markdown import hbold, hitalic
from openai import AsyncOpenAI
import redis
from pydantic import BaseModel, Field
from datetime import datetime
import asyncio
import nest_asyncio

from utils.mylogger import Logger

# –∏–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–∫–∏ –≤–ª–æ–∂–µ–Ω–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
nest_asyncio.apply()
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logger = Logger("promter", "bot.log")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Redis
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis")
    redis_client = redis.Redis.from_url(
        os.getenv("REDIS_URL"),
        socket_timeout=5,
        socket_connect_timeout=5,
        decode_responses=True
    )
    redis_client.ping()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis.")
except redis.RedisError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    raise

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI
openai_client = AsyncOpenAI(
    api_key=os.getenv("API_KEY"),
    base_url=os.getenv("BASE_URL")
)
GPT_MODEL = os.getenv("MODEL_NAME") # –º–æ–¥–µ–ª—å GPT
temperature = float(os.getenv("TEMPERATURE", "0.7")) # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è GPT
MAX_HISTORY = int(os.getenv("MAX_HISTORY"))  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–ª–∏
waiting_for_goal: Dict[int, bool] = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    logger.info("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞")
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="/set_goal")],
            [types.KeyboardButton(text="/current_goal"), types.KeyboardButton(text="/clear_history")],
            [types.KeyboardButton(text="/help")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class UserData(BaseModel):
    goal: str = Field(..., description="–¶–µ–ª—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤")
    created_at: str = Field(default_factory=lambda: datetime.now().isoformat())
    additional_info: Optional[str] = Field(None, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

class DialogSettings(BaseModel):
    max_history: int = Field(default=MAX_HISTORY, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞")
    gpt_temperature: float = Field(default=temperature, description="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è GPT")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    logger.info("–°—Ç–∞—Ä—Ç –±–æ—Ç–∞")
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}! üëã\n"
        "–Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤.\n\n"
        f"{hitalic('–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:')}\n"
        "/set_goal - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤\n"
        "/current_goal - —Ç–µ–∫—É—â–∞—è —Ü–µ–ª—å\n"
        "/clear_history - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "/help - –ø–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_command(message: types.Message):
    logger.info("–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É")
    help_text = (
        f"{hbold('–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:')}\n\n"
        "1. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /set_goal\n"
        "2. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ - —è –±—É–¥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "3. –ü–æ–ª—É—á–∞–π—Ç–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≤–µ–¥–µ–Ω–∏—é –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤\n\n"
        f"{hitalic('–ü—Ä–∏–º–µ—Ä:')}\n"
        "/set_goal –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –¥–µ–≤—É—à–∫–æ–π –æ –≤—Å—Ç—Ä–µ—á–µ –Ω–∞ —Å–µ–Ω–æ–≤–∞–ª–µ\n\n"
        f"–Ø —Å–æ—Ö—Ä–∞–Ω—è—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {MAX_HISTORY} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥–æ–π /clear_history"
    )
    
    await message.answer(
        help_text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

# –ö–æ–º–∞–Ω–¥–∞ /set_goal - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏
@dp.message(Command("set_goal"))
async def set_goal(message: types.Message):
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏")
    args = message.text.split(maxsplit=1)
    user_id = message.from_user.id
    
    if len(args) < 2:
        # –ï—Å–ª–∏ —Ü–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –∫–æ–º–∞–Ω–¥–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–ª–∏
        waiting_for_goal[user_id] = True
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
            f"{hitalic('–ü—Ä–∏–º–µ—Ä:')} –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –∫—É–∑–Ω–µ—Ü–æ–º",
            parse_mode="HTML"
        )
        return

    # –ï—Å–ª–∏ —Ü–µ–ª—å —É–∫–∞–∑–∞–Ω–∞ –≤ –∫–æ–º–∞–Ω–¥–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë
    goal = args[1]
    await save_goal(message, goal)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–∏
async def save_goal(message: types.Message, goal: str):
    user_id = message.from_user.id
    user_data = UserData(goal=goal)
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ —Å NoneType
        user_data_dict = user_data.dict()
        for key, value in user_data_dict.items():
            if value is None:
                user_data_dict[key] = ""
            else:
                user_data_dict[key] = str(value)
                
        redis_client.hset(
            f"user:{user_id}",
            mapping=user_data_dict
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–ª–∏
        waiting_for_goal[user_id] = False
        await message.answer(
            f"üéØ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:\n{hbold(goal)}",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /current_goal - —Ç–µ–∫—É—â–∞—è —Ü–µ–ª—å
@dp.message(Command("current_goal"))
async def current_goal(message: types.Message):
    logger.info("–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å")
    try:
        user_data = redis_client.hgetall(f"user:{message.from_user.id}")
        if not user_data:
            await message.answer("‚ÑπÔ∏è –¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_goal")
            return
            
        goal = user_data.get("goal", "–¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        created_at = user_data.get("created_at", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        response = (
            f"üìå {hbold('–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å:')}\n"
            f"{goal}\n\n"
            f"üïí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {created_at}"
        )
        
        await message.answer(response, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /clear_history - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
@dp.message(Command("clear_history"))
async def clear_history(message: types.Message):
    logger.info("–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏")
    chat_id = message.chat.id
    try:
        redis_client.delete(f"dialog:{chat_id}")
        await message.answer("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!", reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_message(message: types.Message):
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ü–µ–ª—å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in waiting_for_goal and waiting_for_goal[user_id]:
        await save_goal(message, message.text)
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not redis_client.hexists(f"user:{user_id}", "goal"):
            await message.answer(
                "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é /set_goal",
                reply_markup=get_main_keyboard()
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = redis_client.hgetall(f"user:{user_id}")
        goal = user_data["goal"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        message_text = f"user:{user_id}: {message.text}"
        redis_client.rpush(f"dialog:{chat_id}", message_text)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)
        dialog_history = redis_client.lrange(f"dialog:{chat_id}", -MAX_HISTORY, -1)
        context = "\n".join(dialog_history)
        logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞")
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
        prompt = (
            "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å —Å–ª–µ–¥—É—é—â–µ–π —Ü–µ–ª–∏:\n"
            f"–¶–µ–ª—å: {goal}\n\n"
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞:\n"
            f"{context}\n\n"
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –¥–∞–π 1-2 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞, —á—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, "
            "—á—Ç–æ–±—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å—Å—è –∫ —Ü–µ–ª–∏. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º. "
            "–ï—Å–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ –µ—Å—Ç—å —Å–ø–æ—Ä–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, —É–∫–∞–∂–∏ –Ω–∞ –Ω–∏—Ö."
        )
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        try:
            response = await openai_client.chat.completions.create(
                model=GPT_MODEL,
                messages=[{"role": "user", "content": prompt}],
                temperature=temperature,
                max_tokens=int(os.getenv("MAX_TOKENS", "500"))
            )
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI")
            advice = response.choices[0].message.content
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç OpenAI: {advice}")
            await message.answer(
                f"üí° {hbold('–°–æ–≤–µ—Ç –ø–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º:')}\n{advice}",parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"OpenAI API Error: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except redis.RedisError as e:
        logger.error(f"Redis Error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Unexpected Error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    logger.error(f"Update {update} caused error {exception}")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    return True

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())